// Logger utility ƒë·ªÉ ki·ªÉm so√°t console output
const isDevelopment = import.meta.env.DEV;

export const logger = {
  // Ch·ªâ log trong development mode
  debug: (...args) => {
    if (isDevelopment) {
      console.log('üîç', ...args);
    }
  },
  
  // Log th√¥ng tin quan tr·ªçng
  info: (...args) => {
    if (isDevelopment) {
      console.log('‚ÑπÔ∏è', ...args);
    }
  },
  
  // Lu√¥n log warnings
  warn: (...args) => {
    console.warn('‚ö†Ô∏è', ...args);
  },
  
  // Lu√¥n log errors
  error: (...args) => {
    console.error('‚ùå', ...args);
  },
  
  // Log API responses (ch·ªâ development)
  api: (endpoint, response) => {
    if (isDevelopment) {
      console.log(`üåê API [${endpoint}]:`, response);
    }
  },
  
  // Log v·ªõi throttling ƒë·ªÉ tr√°nh spam
  throttledWarn: (() => {
    const throttled = new Map();
    return (key, message, intervalMs = 60000) => {
      const now = Date.now();
      const lastLog = throttled.get(key);
      
      if (!lastLog || (now - lastLog) > intervalMs) {
        console.warn('‚ö†Ô∏è', message);
        throttled.set(key, now);
      }
    };
  })(),
  
  // Performance logging
  time: (label) => {
    if (isDevelopment) {
      console.time(`‚è±Ô∏è ${label}`);
    }
  },
  
  timeEnd: (label) => {
    if (isDevelopment) {
      console.timeEnd(`‚è±Ô∏è ${label}`);
    }
  }
};

export default logger;