import mongoose from "mongoose";
import IssueReport from "../models/IssueReport.js";
import Room from "../models/Room.js";
import Equipment from "../models/Equipment.js";
import User from "../models/User.js";
import dotenv from "dotenv";

dotenv.config({ path: "./backend/.env" });

const createSampleIssueReports = async () => {
  try {
    console.log("üîÑ Connecting to MongoDB...");
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("‚úÖ Connected to MongoDB");

    // T√¨m trainer v√† admin users
    const trainer = await User.findOne({ role: "trainer" });
    const admin = await User.findOne({ role: "admin" });

    if (!trainer) {
      console.log("‚ùå No trainer found. Please create a trainer user first.");
      return;
    }

    // T√¨m rooms v√† equipment
    const rooms = await Room.find().limit(3);
    const equipment = await Equipment.find().limit(3);

    console.log(
      `Found ${rooms.length} rooms and ${equipment.length} equipment`
    );

    // X√≥a issue reports c≈©
    console.log("üóëÔ∏è Clearing existing issue reports...");
    await IssueReport.deleteMany({});

    // T·∫°o sample issue reports
    const sampleReports = [
      {
        reportedBy: trainer._id,
        reportType: "equipment",
        equipment: equipment[0]?._id,
        issueType: "malfunction",
        title: "M√°y ch·∫°y b·ªô kh√¥ng ho·∫°t ƒë·ªông",
        description:
          "M√°y ch·∫°y b·ªô s·ªë 3 b·ªã k·∫πt bƒÉng t·∫£i, kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c. ƒê√£ th·ª≠ reset nhi·ªÅu l·∫ßn nh∆∞ng kh√¥ng c√≥ t√°c d·ª•ng.",
        severity: "high",
        priority: "high",
        status: "reported",
        images: [
          {
            filename: "sample1.jpg",
            originalName: "machine_error.jpg",
            mimetype: "image/jpeg",
            size: 245632,
            url: "/uploads/issue-reports/sample1.jpg",
          },
        ],
      },
      {
        reportedBy: trainer._id,
        reportType: "room",
        room: rooms[0]?._id,
        issueType: "safety_concern",
        title: "ƒêi·ªÅu h√≤a ph√≤ng yoga b·ªã r√≤ r·ªâ n∆∞·ªõc",
        description:
          "ƒêi·ªÅu h√≤a trong ph√≤ng yoga b·ªã r√≤ r·ªâ n∆∞·ªõc xu·ªëng s√†n t·∫°o v·∫øt n∆∞·ªõc tr∆°n tr∆∞·ª£t, c√≥ th·ªÉ g√¢y nguy hi·ªÉm cho h·ªçc vi√™n.",
        severity: "critical",
        priority: "urgent",
        status: "acknowledged",
        acknowledgedBy: admin?._id,
        acknowledgedAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
        adminNotes:
          "ƒê√£ nh·∫≠n ƒë∆∞·ª£c b√°o c√°o, s·∫Ω li√™n h·ªá th·ª£ s·ª≠a ch·ªØa ngay l·∫≠p t·ª©c.",
        images: [
          {
            filename: "sample2.jpg",
            originalName: "water_leak.jpg",
            mimetype: "image/jpeg",
            size: 189456,
            url: "/uploads/issue-reports/sample2.jpg",
          },
        ],
      },
      {
        reportedBy: trainer._id,
        reportType: "equipment",
        equipment: equipment[1]?._id,
        issueType: "needs_cleaning",
        title: "Thi·∫øt b·ªã t·∫° c·∫ßn v·ªá sinh s√¢u",
        description:
          "B·ªô t·∫° t·ª± do c√≥ m√πi kh√≥ ch·ªãu v√† b√°m nhi·ªÅu b·ª•i b·∫©n. C·∫ßn v·ªá sinh v√† kh·ª≠ tr√πng to√†n b·ªô.",
        severity: "medium",
        priority: "normal",
        status: "in_progress",
        acknowledgedBy: admin?._id,
        acknowledgedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
        adminNotes: "ƒê√£ giao cho b·ªô ph·∫≠n v·ªá sinh x·ª≠ l√Ω.",
      },
      {
        reportedBy: trainer._id,
        reportType: "room",
        room: rooms[1]?._id,
        issueType: "damage",
        title: "G∆∞∆°ng ph√≤ng t·∫≠p b·ªã n·ª©t",
        description:
          "T·∫•m g∆∞∆°ng l·ªõn ·ªü ph√≤ng t·∫≠p t·∫° b·ªã n·ª©t g√≥c, c√≥ th·ªÉ r∆°i v√† g√¢y nguy hi·ªÉm.",
        severity: "high",
        priority: "high",
        status: "resolved",
        acknowledgedBy: admin?._id,
        acknowledgedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
        resolvedBy: admin?._id,
        resolvedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
        adminNotes: "ƒê√£ li√™n h·ªá th·ª£ thay g∆∞∆°ng m·ªõi.",
        resolutionNotes:
          "ƒê√£ thay th·∫ø t·∫•m g∆∞∆°ng m·ªõi an to√†n. Ki·ªÉm tra v√† test ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.",
      },
      {
        reportedBy: trainer._id,
        reportType: "facility",
        issueType: "environmental_issue",
        title: "H·ªá th·ªëng th√¥ng gi√≥ k√©m",
        description:
          "Kh√¥ng kh√≠ trong ph√≤ng t·∫≠p b√≠ b√°ch, h·ªá th·ªëng th√¥ng gi√≥ kh√¥ng ho·∫°t ƒë·ªông hi·ªáu qu·∫£.",
        severity: "medium",
        priority: "normal",
        status: "reported",
      },
    ];

    console.log("üìù Creating sample issue reports...");
    const createdReports = await IssueReport.create(sampleReports);

    console.log(
      `‚úÖ Successfully created ${createdReports.length} issue reports:`
    );
    createdReports.forEach((report, index) => {
      console.log(
        `   ${index + 1}. ${report.title} - Status: ${report.status}`
      );
    });

    // Stats
    const stats = {
      total: await IssueReport.countDocuments(),
      reported: await IssueReport.countDocuments({ status: "reported" }),
      acknowledged: await IssueReport.countDocuments({
        status: "acknowledged",
      }),
      inProgress: await IssueReport.countDocuments({ status: "in_progress" }),
      resolved: await IssueReport.countDocuments({ status: "resolved" }),
    };

    console.log("\nüìä Issue Report Statistics:");
    console.log(`   Total: ${stats.total}`);
    console.log(`   Reported: ${stats.reported}`);
    console.log(`   Acknowledged: ${stats.acknowledged}`);
    console.log(`   In Progress: ${stats.inProgress}`);
    console.log(`   Resolved: ${stats.resolved}`);
  } catch (error) {
    console.error("‚ùå Error creating sample issue reports:", error);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Disconnected from MongoDB");
  }
};

createSampleIssueReports();
